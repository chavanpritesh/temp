
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract StudentData {
    
    struct Student {
        uint id;
        string name;
        uint age;
        uint grade;
    }

    // Array to store multiple Student structures
    Student[] public students;

    // Mapping id to avoid duplicates
    mapping(uint => bool) private studentExists;

    event StudentAdded(uint id, string name, uint age, uint grade);

    function addStudent(uint _id, string memory _name, uint _age, uint _grade) public {
        require(!studentExists[_id], "Student ID already exists.");
        
        Student memory newStudent = Student({
            id: _id,
            name: _name,
            age: _age,
            grade: _grade
        });
        
        students.push(newStudent);
        studentExists[_id] = true;

        emit StudentAdded(_id, _name, _age, _grade);
    }

    // student's data by array index
    function getStudent(uint index) public view returns (uint, string memory, uint, uint) {
        require(index < students.length, "Student does not exist.");
        Student memory student = students[index];
        return (student.id, student.name, student.age, student.grade);
    }

    function getStudentCount() public view returns (uint) {
        return students.length;
    }

    // handle simple Ether transfers
    receive() external payable {

    }

    // to handle unexpected calls or Ether with data
    fallback() external payable {

    }
}
