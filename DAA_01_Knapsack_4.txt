def knapsack(weights, values, capacity):
    num_items = len(values)
    # Initialize DP table with zeros
    dp = [[0] * (capacity + 1) for _ in range(num_items + 1)]

    # Build DP table
    for i in range(1, num_items + 1):
        for w in range(1, capacity + 1):
            if weights[i - 1] <= w:
                # Include item or exclude it based on maximum value
                dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])
            else:
                dp[i][w] = dp[i - 1][w]

    return dp[num_items][capacity]

def main():
    num_items = int(input("Enter number of items: "))
    weights = []
    values = []

    for i in range(num_items):
        weight = int(input(f"Weight of item {i + 1}: "))
        value = int(input(f"Value of item {i + 1}: "))
        weights.append(weight)
        values.append(value)

    capacity = int(input("Enter knapsack capacity: "))

    max_value = knapsack(weights, values, capacity)

    print(f"Maximum value that can be carried: {max_value}")

if __name__ == "__main__":
    main()
