class NQueens:
    def __init__(self, size):
        self.size = size
        self.board = [[False] * size for _ in range(size)]
        self.solutions = 0

    def printBoard(self):
        for row in self.board:
            print(" ".join("Q" if col else "X" for col in row))
        print()

    def isSafe(self, row, col):
        # Check column and diagonals
        for i in range(row):
            if (self.board[i][col] or 
                (col - (row - i) >= 0 and self.board[i][col - (row - i)]) or 
                (col + (row - i) < self.size and self.board[i][col + (row - i)])):
                return False
        return True

    def solve(self, row=0):
        # Skip the row where the first queen is already placed
        if row == self.size:
            self.solutions += 1
            print(f"Solution {self.solutions}:")
            self.printBoard()
            return
        if any(self.board[row]):
            self.solve(row + 1)
            return

        for col in range(self.size):
            if self.isSafe(row, col):
                self.board[row][col] = True
                self.solve(row + 1)
                self.board[row][col] = False

    def setFirstQueen(self):
        row = int(input(f"Enter row (1-{self.size}) of first queen: ")) - 1
        col = int(input(f"Enter column (1-{self.size}) of first queen: ")) - 1
        if 0 <= row < self.size and 0 <= col < self.size:
            self.board[row][col] = True
            print("Initial Board with first queen placed:")
            self.printBoard()
        else:
            print("Invalid coordinates. Please try again.")
            self.setFirstQueen()

if __name__ == "__main__":
    size = int(input("Enter size of chessboard: "))
    solver = NQueens(size)
    solver.setFirstQueen()
    solver.solve()
